README: TRACK TRACER
Introduction

This program is a server-side application designed to manage passenger details for a transportation system. It operates using sockets to communicate with a client, which could be a passenger attempting to book a train seat.
Functionality

    Socket Creation and Configuration
        The server creates a socket using socket(AF_INET, SOCK_STREAM, 0) to establish communication over the network.
        It configures the server address (struct sockaddr_in) to bind to a specific IP address and port.

    Server Initialization
        The server binds the socket to the specified IP address and port using bind().
        It listens for incoming connections using listen().

    Accepting Client Connection
        Upon receiving a connection request (accept()), the server establishes a connection with the client.

    Sending Initial Welcome Message and OTP
        Sends a welcome message (server_message) to the client upon connection.
        Generates a random 4-digit OTP (otp) and sends it to the client for authentication.

    Passkey Verification
        Prompts the client to enter a passkey.
        Compares the received passkey with the OTP generated.
        If the passkey matches the OTP, proceeds with collecting passenger details.

    Collecting Passenger Details
        Requests and receives the passenger's name, age, gender, date of travel, preferred train choice, and seat preference from the client.

    Updating Seat Matrix
        Receives the seat selection from the client and updates the seat matrix accordingly.

    Saving Passenger Information
        Writes the collected passenger details along with the seat allocation into a file named ticket.txt.

    Food Ordering
        Offers the client the option to order food during the journey.

    Error Handling
        Catches errors during socket operations and exits gracefully if any operation fails.

Colorful Console Output

    Utilizes ANSI color escape codes (#define macros) to enhance the console output with colors for better readability.

Usage

    Compile and run the server program on a machine connected to a network.
    A client (passenger) can connect to this server using the appropriate client-side application.
    Follow the prompts to enter necessary details and complete the booking process.


Compile the code using gcc:

    bash
    gcc server.c -o server

Run the compiled executable:

     bash
    ./server

Notes

    1.Ensure the server is running and reachable from the client-side application.
    2.This program serves as a demonstration and requires further enhancements for robustness, security, and scalability in a real-world scenario.
